/*
  For more information, please see: http://software.sci.utah.edu
  
  The MIT License

  Copyright (c) 2009 Scientific Computing and Imaging Institute,
  University of Utah.


  Permission is hereby granted, free of charge, to any person obtaining a 
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation 
  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Software, and to permit persons to whom the 
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included 
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
  DEALINGS IN THE SOFTWARE.
*/

/////////////////////////////////////////////////////////////////////////////
// Name:        arithmeticvolume.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     20/08/2007 08:51:42
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 20/08/2007 08:51:42

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"
#include <Applications/Seg3D/Painter.h>
#include <Applications/Seg3D/Seg3DwxGuiUtils.h>

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "arithmeticvolume.h"
#include "seg3devents.h"

////@begin XPM images
////@end XPM images


/*!
 * ArithmeticVolume type definition
 */

IMPLEMENT_DYNAMIC_CLASS( ArithmeticVolume, wxPanel )


/*!
 * ArithmeticVolume event table definition
 */

BEGIN_EVENT_TABLE( ArithmeticVolume, wxPanel )

////@begin ArithmeticVolume event table entries
////@end ArithmeticVolume event table entries
EVT_COMMAND (wxID_ANY, wxEVT_ARITHMETIC_SET_INPUTS, ArithmeticVolume::OnSetInputs )
EVT_BUTTON( XRCID("START_BUTTON"),    ArithmeticVolume::OnStartButtonClick )
EVT_BUTTON( XRCID("CLOSE_BUTTON"),    ArithmeticVolume::OnCloseButtonClick )

END_EVENT_TABLE()


/*!
 * ArithmeticVolume constructors
 */

ArithmeticVolume::ArithmeticVolume()
{
  Init();
}

ArithmeticVolume::ArithmeticVolume( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
  Init();
  Create(parent, id, pos, size, style);
}


/*!
 * ArithmeticVolume creator
 */

bool ArithmeticVolume::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin ArithmeticVolume creation
  SetParent(parent);
  CreateControls();
  if (GetSizer())
  {
    GetSizer()->SetSizeHints(this);
  }
  ////@end ArithmeticVolume creation
  return true;
}


/*!
 * ArithmeticVolume destructor
 */

ArithmeticVolume::~ArithmeticVolume()
{
////@begin ArithmeticVolume destruction
////@end ArithmeticVolume destruction
}


/*!
 * Member initialisation
 */

void ArithmeticVolume::Init()
{
////@begin ArithmeticVolume member initialisation
  mInput1    = NULL;
  mInput2    = NULL;
  mOperation = NULL;
////@end ArithmeticVolume member initialisation
}


/*!
 * Control creation for ArithmeticVolume
 */

void ArithmeticVolume::CreateControls()
{    
////@begin ArithmeticVolume content construction
  if (!wxXmlResource::Get()->LoadPanel(this, GetParent(), _T("ID_ARITHMETICVOLUME")))
    wxLogError(wxT("Missing wxXmlResource::Get()->Load() in OnInit()?"));
  
  mInput1    = XRCCTRL(*this, "ID_INPUT_1", wxChoice);
  mInput2    = XRCCTRL(*this, "ID_INPUT_2", wxChoice);
  mOperation = XRCCTRL(*this, "ID_OPERATION", wxChoice);
  // Create custom windows not generated automatically here.
////@begin ArithmeticVolume content initialisation
////@end ArithmeticVolume content initialisation
}


void ArithmeticVolume::OnSetInputs( wxCommandEvent &event )
{
  std::vector< std::string > *names =
    (std::vector< std::string > *)event.GetClientData();

  mInput1->Clear();
  mInput2->Clear();

  std::vector<string>::iterator it;
  for ( it=names->begin(); it<names->end(); ++it )
  {
    mInput1->Append(std2wx( (*it).c_str()));
    mInput2->Append(std2wx( (*it).c_str()));
  }
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for START_BUTTON
 */
void ArithmeticVolume::OnStartButtonClick( wxCommandEvent& event )
{
  wxBeginBusyCursor();
  SCIRun::ThrowSkinnerSignalEvent *tsse = new SCIRun::ThrowSkinnerSignalEvent("Painter::FinishTool");
  tsse->add_var( "Painter::Arithmetic::input1", wx2std( mInput1->GetStringSelection() ) );
  tsse->add_var( "Painter::Arithmetic::input2", wx2std( mInput2->GetStringSelection() ) );
  tsse->add_var( "Painter::Arithmetic::operation", wx2std( mOperation->GetStringSelection() ) );
  SCIRun::Painter::ThrowSkinnerSignal(tsse);
  wxEndBusyCursor();
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for CLOSE_BUTTON
 */
void ArithmeticVolume::OnCloseButtonClick( wxCommandEvent& event )
{
  SCIRun::Painter::global_seg3dframe_pointer_->HideTool();
}

/*!
 * Should we show tooltips?
 */

bool ArithmeticVolume::ShowToolTips()
{
  return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap ArithmeticVolume::GetBitmapResource( const wxString& name )
{
  // Bitmap retrieval
  ////@begin ArithmeticVolume bitmap retrieval
  wxUnusedVar(name);
  return wxNullBitmap;
  ////@end ArithmeticVolume bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon ArithmeticVolume::GetIconResource( const wxString& name )
{
  // Icon retrieval
  ////@begin ArithmeticVolume icon retrieval
  wxUnusedVar(name);
  return wxNullIcon;
  ////@end ArithmeticVolume icon retrieval
}
