/*
  For more information, please see: http://software.sci.utah.edu
  
  The MIT License

  Copyright (c) 2009 Scientific Computing and Imaging Institute,
  University of Utah.


  Permission is hereby granted, free of charge, to any person obtaining a 
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation 
  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Software, and to permit persons to whom the 
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included 
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
  DEALINGS IN THE SOFTWARE.
*/

/////////////////////////////////////////////////////////////////////////////
// Name:        itkbinarydilateerodefilter.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     14/08/2007 13:07:39
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 14/08/2007 13:07:39

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"
#include <Applications/Seg3D/Painter.h>

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "itkbinarydilateerodefilter.h"
#include "seg3devents.h"

////@begin XPM images
////@end XPM images


/*!
 * ITKBinaryDilateErodeFilter type definition
 */

IMPLEMENT_DYNAMIC_CLASS( ITKBinaryDilateErodeFilter, wxPanel )


/*!
 * ITKBinaryDilateErodeFilter event table definition
 */

BEGIN_EVENT_TABLE( ITKBinaryDilateErodeFilter, wxPanel )

////@begin ITKBinaryDilateErodeFilter event table entries
////@end ITKBinaryDilateErodeFilter event table entries
EVT_BUTTON( XRCID("DILATE_BUTTON"), ITKBinaryDilateErodeFilter::OnDilateButtonClick )
EVT_BUTTON( XRCID("ERODE_BUTTON"), ITKBinaryDilateErodeFilter::OneErodeButtonClick )
EVT_BUTTON( XRCID("DILATE_ERODE_BUTTON"), ITKBinaryDilateErodeFilter::OnDilateErodeButtonClick )
EVT_BUTTON( XRCID("CLOSE_BUTTON"), ITKBinaryDilateErodeFilter::OnCloseButtonClick )
EVT_RADIOBUTTON(XRCID("APPLY_2D_BUTTON"), ITKBinaryDilateErodeFilter::OnSet2D )
EVT_RADIOBUTTON(XRCID("APPLY_3D_BUTTON"), ITKBinaryDilateErodeFilter::OnSet3D )

EVT_COMMAND( wxID_ANY, wxEVT_SET_PROGRESS, ITKBinaryDilateErodeFilter::OnSetProgress)

END_EVENT_TABLE()


/*!
 * ITKBinaryDilateErodeFilter constructors
 */

ITKBinaryDilateErodeFilter::ITKBinaryDilateErodeFilter()
{
  Init();
}

ITKBinaryDilateErodeFilter::ITKBinaryDilateErodeFilter( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
  Init();
  Create(parent, id, pos, size, style);
}


/*!
 * ITKBinaryDilateErodeFilter creator
 */

bool ITKBinaryDilateErodeFilter::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
  ////@begin ITKBinaryDilateErodeFilter creation
  SetParent(parent);
  CreateControls();
  if (GetSizer())
  {
    GetSizer()->SetSizeHints(this);
  }
  ////@end ITKBinaryDilateErodeFilter creation
  return true;
}


/*!
 * ITKBinaryDilateErodeFilter destructor
 */

ITKBinaryDilateErodeFilter::~ITKBinaryDilateErodeFilter()
{
  ////@begin ITKBinaryDilateErodeFilter destruction
  ////@end ITKBinaryDilateErodeFilter destruction
}


/*!
 * Member initialisation
 */

void ITKBinaryDilateErodeFilter::Init()
{
  ////@begin ITKBinaryDilateErodeFilter member initialisation
  mDilateRadius = NULL;
  mErodeRadius = NULL;
  mPercentage = NULL;
  ////@end ITKBinaryDilateErodeFilter member initialisation
  
  disabler_ = NULL;

  mDimension_ = 3;
}


/*!
 * Control creation for ITKBinaryDilateErodeFilter
 */

void ITKBinaryDilateErodeFilter::CreateControls()
{    
  ////@begin ITKBinaryDilateErodeFilter content construction
  if (!wxXmlResource::Get()->LoadPanel(this, GetParent(), _T("ID_ITKBINARYDILATEERODEFILTER")))
    wxLogError(wxT("Missing wxXmlResource::Get()->Load() in OnInit()?"));
  mDilateRadius = XRCCTRL(*this, "SPIN_DILUTE_RADIUS", wxSpinCtrl);
  mErodeRadius = XRCCTRL(*this, "SPIN_ERODE_RADIUS", wxSpinCtrl);
  mPercentage = XRCCTRL(*this, "ID_GAUGE", wxGauge);
  ////@end ITKBinaryDilateErodeFilter content construction

  // Create custom windows not generated automatically here.
  ////@begin ITKBinaryDilateErodeFilter content initialisation
  ////@end ITKBinaryDilateErodeFilter content initialisation
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for DILATE_BUTTON
 */
void ITKBinaryDilateErodeFilter::OnDilateButtonClick( wxCommandEvent& event )
{
  SCIRun::ThrowSkinnerSignalEvent *tsse =
    new SCIRun::ThrowSkinnerSignalEvent("Painter::ITKBinaryDilate");
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::DilateRadius",
                SCIRun::to_string(mDilateRadius->GetValue()));
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::ErodeRadius",
                SCIRun::to_string(mErodeRadius->GetValue()));
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::Dimension",
                SCIRun::to_string(mDimension_));
  
  SCIRun::Painter::ThrowSkinnerSignal(tsse, false);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ERODE_BUTTON
 */
void ITKBinaryDilateErodeFilter::OneErodeButtonClick( wxCommandEvent& event )
{
  SCIRun::ThrowSkinnerSignalEvent *tsse =
    new SCIRun::ThrowSkinnerSignalEvent("Painter::ITKBinaryErode");
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::DilateRadius",
                SCIRun::to_string(mDilateRadius->GetValue()));
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::ErodeRadius",
                SCIRun::to_string(mErodeRadius->GetValue()));
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::Dimension",
                SCIRun::to_string(mDimension_));
  SCIRun::Painter::ThrowSkinnerSignal(tsse, false);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for DILATE_ERODE_BUTTON
 */
void ITKBinaryDilateErodeFilter::OnDilateErodeButtonClick( wxCommandEvent& event )
{
  SCIRun::ThrowSkinnerSignalEvent *tsse =
    new SCIRun::ThrowSkinnerSignalEvent("Painter::ITKBinaryDilateErode");
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::DilateRadius",
                SCIRun::to_string(mDilateRadius->GetValue()));
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::ErodeRadius",
                SCIRun::to_string(mErodeRadius->GetValue()));
  tsse->add_var("ITKBinaryDilateErodeImageFilterTool::Dimension",
                SCIRun::to_string(mDimension_));
  SCIRun::Painter::ThrowSkinnerSignal(tsse, false);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for CLOSE_BUTTON
 */
void ITKBinaryDilateErodeFilter::OnCloseButtonClick( wxCommandEvent& event )
{
  SCIRun::Painter::global_seg3dframe_pointer_->HideTool();
}

void ITKBinaryDilateErodeFilter::OnSetProgress( wxCommandEvent &event)
{	
  int progress = event.GetInt();
  
  if (progress < 0)
  {
    disabler_ = new wxWindowDisabler();
    wxBeginBusyCursor();
    progress = 0;
  }
  if (progress > 100)
  {
    if (disabler_) { delete disabler_; disabler_ = 0; }
    wxEndBusyCursor();
    progress = 100;
  }
  if (progress == 0 || progress > mPercentage->GetValue())
  {
    mPercentage->SetValue(progress);
  }
}

/*!
 * Should we show tooltips?
 */

bool ITKBinaryDilateErodeFilter::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap ITKBinaryDilateErodeFilter::GetBitmapResource( const wxString& name )
{
  // Bitmap retrieval
  ////@begin ITKBinaryDilateErodeFilter bitmap retrieval
  wxUnusedVar(name);
  return wxNullBitmap;
  ////@end ITKBinaryDilateErodeFilter bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon ITKBinaryDilateErodeFilter::GetIconResource( const wxString& name )
{
  // Icon retrieval
  ////@begin ITKBinaryDilateErodeFilter icon retrieval
  wxUnusedVar(name);
  return wxNullIcon;
  ////@end ITKBinaryDilateErodeFilter icon retrieval
}
