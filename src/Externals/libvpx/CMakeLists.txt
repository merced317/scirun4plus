SET(SCI_VPX_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/include CACHE INTERNAL "Public libvpx include directories." FORCE)

IF(WIN32 AND MSVC)
	IF (CMAKE_SIZEOF_VOID_P MATCHES 8)
	  SET(SCI_VPX_LIBRARY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/lib/win/x64/vpxmdd.lib CACHE INTERNAL "libvpx debug library" FORCE)
	  SET(SCI_VPX_LIBRARY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/lib/win/x64/vpxmd.lib CACHE INTERNAL "libvpx release library" FORCE)
	  SET(SCI_VPX_LIBRARY optimized ${SCI_VPX_LIBRARY_RELEASE} debug ${SCI_VPX_LIBRARY_DEBUG})
	ELSE (CMAKE_SIZEOF_VOID_P MATCHES 8)
	  SET(SCI_VPX_LIBRARY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/lib/win/x86/vpxmdd.lib CACHE INTERNAL "libvpx debug library" FORCE)
	  SET(SCI_VPX_LIBRARY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/lib/win/x86/vpxmd.lib CACHE INTERNAL "libvpx release library" FORCE)
	  SET(SCI_VPX_LIBRARY optimized ${SCI_VPX_LIBRARY_RELEASE} debug ${SCI_VPX_LIBRARY_DEBUG})
	ENDIF (CMAKE_SIZEOF_VOID_P MATCHES 8)
ELSE(WIN32 AND MSVC)
	IF(APPLE)
		SET(SCI_VPX_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac/libvpx.a)
	ELSE(APPLE)
		IF (CMAKE_SIZEOF_VOID_P MATCHES 8)
		   SET(SCI_VPX_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/lib/linux/x64/libvpx.a)
		ELSE (CMAKE_SIZEOF_VOID_P MATCHES 8)
		   SET(SCI_VPX_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/lib/linux/x86/libvpx.a)
		ENDIF (CMAKE_SIZEOF_VOID_P MATCHES 8)
	ENDIF(APPLE)
ENDIF(WIN32 AND MSVC)

SET(SCI_VPX_LIBRARY ${SCI_VPX_LIBRARY} CACHE INTERNAL "The libvpx library" FORCE)
